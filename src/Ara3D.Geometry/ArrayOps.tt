<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>

// AUTOGENERATED FILE: DO NOT EDIT
// This file is generated from ArrayOps.tt
 
<# 
var nonVectorTypes = new[] { "int", "long", "float", "double" };
var vectorTypes = new[] { "Vector2", "Vector3", "Vector4" };
var types = nonVectorTypes.Concat(vectorTypes);
var intTypes = new[] { "int", "long" };
var araBinaryOps = new[] { "Add", "Sub", "Mul", "Div" };
var araCompOps = new[] { "Gt", "Lt", "GtEq", "LtEq", "Eq", "NEq" };
var sysUnaryOps = new[] { "Abs", "Acos", "Asin", "Atan", "Cos", "Cosh", "Exp", "Ln", "Log10", "Sin", "Sinh", "Sqrt", "Tan", "Tanh" };
var araUnaryOps = new[] { "Sqr", "Inverse", "Ceiling", "Floor", "Round", "Truncate" };
var allUnaryOps = sysUnaryOps.Concat(araUnaryOps);
#>

using Ara3D.Collections;
using Ara3D.Math;

namespace Vim.Format.Geometry
{
    public static class ArrayOps
    {
    
<# 
foreach (var t in types) { 
foreach (var op in new[] { "Add", "Multiply", "Subtract", "Divide" }) 
{
#>
        public static IArray< <#= t #> > <#= op #>(this IArray< <#= t #> > self, IArray< <#= t #> > other) => self.Zip(other, MathOps.<#= op #>); 
        public static IArray< <#= t #> > <#= op #>(this IArray< <#= t #> > self, <#= t #> scalar) => self.Select(x => MathOps.<#= op #>(x, scalar)); 
        public static IArray< <#= t #> > <#= op #>(this <#= t #> self, IArray< <#= t #> > vector) => vector.Select(x => MathOps.<#= op #>(self, x)); 
<#
} 
}
foreach (var op in allUnaryOps) {
#>

        public static IArray<double> <#= op #> (this IArray< double > self) => self.Select(MathOps.<#= op #>); 
        public static IArray<float> <#= op #> (this IArray< float > self) => self.Select(MathOps.<#= op #>); 
        public static IArray<Vector2> <#= op #> (this IArray< Vector2 > self) => self.Select(MathOps.<#= op #>); 
        public static IArray<Vector3> <#= op #> (this IArray< Vector3 > self) => self.Select(MathOps.<#= op #>); 
        public static IArray<Vector4> <#= op #> (this IArray< Vector4 > self) => self.Select(MathOps.<#= op #>); 
<#
}
#>
        // TODO: do this over all over the numerical types
        public static long Sum(this IArray<int> self) => self.Aggregate(0L, (x, y) => x + y); 
        public static long Sum(this IArray<long> self) => self.Aggregate(0L, (x, y) => x + y); 
        public static double Sum(this IArray<float> self) => self.Aggregate(0.0, (x, y) => x + y); 
        public static double Sum(this IArray<double> self) => self.Aggregate(0.0, (x, y) => x + y); 
        public static Vector2 Sum(this IArray<Vector2> self) => self.Aggregate(Vector2.Zero, (x, y) => x + y); 
        public static Vector3 Sum(this IArray<Vector3> self) => self.Aggregate(Vector3.Zero, (x, y) => x + y); 
        public static Vector4 Sum(this IArray<Vector4> self) => self.Aggregate(Vector4.Zero, (x, y) => x + y); 
        
        public static double Average(this IArray<int> self) => self.Sum() / self.Count; 
        public static double Average(this IArray<long> self) => self.Sum() / self.Count; 
        public static double Average(this IArray<float> self) => self.Sum() / self.Count; 
        public static double Average(this IArray<double> self) => self.Sum() / self.Count; 
        public static Vector2 Average(this IArray<Vector2> self) => self.Sum() / self.Count; 
        public static Vector3 Average(this IArray<Vector3> self) => self.Sum() / self.Count; 
        public static Vector4 Average(this IArray<Vector4> self) => self.Sum() / self.Count;     

        public static double Variance(this IArray<int> self) { var mean = self.Average(); return self.Select(x => MathOps.Sqr(x - mean)).Average(); }
        public static double Variance(this IArray<long> self) { var mean = self.Average(); return self.Select(x => MathOps.Sqr(x - mean)).Average(); }
        public static double Variance(this IArray<float> self) { var mean = self.Average(); return self.Select(x => MathOps.Sqr(x - mean)).Average(); }
        public static double Variance(this IArray<double> self) { var mean = self.Average(); return self.Select(x => MathOps.Sqr(x - mean)).Average(); }
        public static Vector2 Variance(this IArray<Vector2> self) { var mean = self.Average(); return self.Select(x => MathOps.Sqr(x - mean)).Average(); }
        public static Vector3 Variance(this IArray<Vector3> self) { var mean = self.Average(); return self.Select(x => MathOps.Sqr(x - mean)).Average(); }
        public static Vector4 Variance(this IArray<Vector4> self) { var mean = self.Average(); return self.Select(x => MathOps.Sqr(x - mean)).Average(); }

        public static double StdDev(this IArray<int> self) => self.Variance().Sqrt(); 
        public static double StdDev(this IArray<long> self) => self.Variance().Sqrt(); 
        public static double StdDev(this IArray<float> self) => self.Variance().Sqrt(); 
        public static double StdDev(this IArray<double> self) => self.Variance().Sqrt(); 
        public static Vector2 StdDev(this IArray<Vector2> self) => self.Variance().Sqrt(); 
        public static Vector3 StdDev(this IArray<Vector3> self) => self.Variance().Sqrt(); 
        public static Vector4 StdDev(this IArray<Vector4> self) => self.Variance().Sqrt(); 

        public static IArray<int> PartialSums(this IArray<int> self) => self.PostAccumulate((x, y) => x + y); 
        public static IArray<long> PartialSums(this IArray<long> self) => self.PostAccumulate((x, y) => x + y); 
        public static IArray<float> PartialSums(this IArray<float> self) => self.PostAccumulate((x, y) => x + y); 
        public static IArray<double> PartialSums(this IArray<double> self) => self.PostAccumulate((x, y) => x + y); 
        public static IArray<Vector2> PartialSums(this IArray<Vector2> self) => self.PostAccumulate((x, y) => x + y); 
        public static IArray<Vector3> PartialSums(this IArray<Vector3> self) => self.PostAccumulate((x, y) => x + y); 
        public static IArray<Vector4> PartialSums(this IArray<Vector4> self) => self.PostAccumulate((x, y) => x + y); 
        
    }
} 
